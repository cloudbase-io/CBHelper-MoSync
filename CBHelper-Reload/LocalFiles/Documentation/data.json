{
    "project": {},
    "files": {
        "CBHelper.js": {
            "name": "CBHelper.js",
            "modules": {},
            "classes": {
                "CBHelperResponseInfo": 1,
                "CBHelperCurrentLocation": 1,
                "CBHelper": 1
            },
            "fors": {},
            "namespaces": {}
        },
        "XMLHttpRequest.js": {
            "name": "XMLHttpRequest.js",
            "modules": {},
            "classes": {},
            "fors": {},
            "namespaces": {}
        }
    },
    "modules": {},
    "classes": {
        "CBHelperResponseInfo": {
            "name": "CBHelperResponseInfo",
            "shortname": "CBHelperResponseInfo",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "CBHelper.js",
            "line": 23,
            "description": "The CBHelperResponseInfo object contains all of the data and information returned \nby cloudbase.io once a request is made. Other than the file download API calls all\nother calls will send to the responder function an object of this type",
            "is_constructor": 1
        },
        "CBHelperCurrentLocation": {
            "name": "CBHelperCurrentLocation",
            "shortname": "CBHelperCurrentLocation",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "CBHelper.js",
            "line": 86,
            "description": "This object is used to store and send to the cloudbase.io servers the location information - \nit should be set in the <strong>currentLocation</strong> property of the CBHelper object.",
            "is_constructor": 1
        },
        "CBHelper": {
            "name": "CBHelper",
            "shortname": "CBHelper",
            "classitems": [],
            "plugins": [],
            "extensions": [],
            "plugin_for": [],
            "extension_for": [],
            "file": "CBHelper.js",
            "line": 99,
            "description": "This is the main cloudbase.io helper class. all of the API calls can be made through this object\nonce it's been instanced using the application code, unique identifier and password.\nThe CBHelper class depends on the XMLHttpRequest and JSON objects being loaded.",
            "is_constructor": 1
        }
    },
    "classitems": [
        {
            "file": "CBHelper.js",
            "line": 32,
            "description": "The status code returned by the cloudbase.io APIs. The most common values are\n200 for OK or 401 for unauthorized request.",
            "itemtype": "property",
            "name": "httpStatus",
            "type": "int",
            "default": "0",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 41,
            "description": "The function type for the current API call. log/data/notifications/cloudfunction/email and so on.\nThis is irrelevant unless you need to parse again the output returned by the APIs using the \noutputString property.",
            "itemtype": "property",
            "name": "cloudbaseFunction",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 51,
            "description": "The error message (if any) returned by the cloudbase APIs",
            "itemtype": "property",
            "name": "errorMessage",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 59,
            "description": "Whether the API call was succesfull - the httpStatus may be 200 but the parameters were badly formatted\nso the value of this property is <strong>false</strong>.",
            "itemtype": "property",
            "name": "callStatus",
            "type": "bool",
            "default": "false",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 68,
            "description": "The parsed JSON output of the API call.",
            "itemtype": "property",
            "name": "outputData",
            "type": "object/array",
            "default": "object {}",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 76,
            "description": "The full JSON response returned by the cloudbase.io servers.",
            "itemtype": "property",
            "name": "outputString",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelperResponseInfo"
        },
        {
            "file": "CBHelper.js",
            "line": 108,
            "description": "The application code assigned to the cloudbase.io application",
            "itemtype": "property",
            "name": "appCode",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 116,
            "description": "The application unique identifier assigned to the cloudbase.io application",
            "itemtype": "property",
            "name": "appUniq",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 124,
            "description": "The md5 hash of the application password on cloudbase.io.",
            "itemtype": "property",
            "name": "password",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 132,
            "description": "The unique identifier for the device - this will depend on which platform the \napplication is running and may be null. It should always be set to something as \nthis value is used to generate analytics about the number of visitors",
            "itemtype": "property",
            "name": "deviceUniqueIdentifier",
            "type": "string",
            "default": "window.device.uuid",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 142,
            "description": "The current language of the device's UI. This is used to generate analytics.",
            "itemtype": "property",
            "name": "language",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 150,
            "description": "The country taken from the device locale settings",
            "itemtype": "property",
            "name": "country",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 158,
            "description": "The sessionId is a unique identifier generated by the cloudbase.io servers once a\ndevice is registered - See registerDevice API call.",
            "itemtype": "property",
            "name": "sessionId",
            "type": "string",
            "default": "\"\"",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 168,
            "description": "This variable should contain a CBHelperCurrentLocation object. if this property is set\nthen the location information will be sent with each API call.",
            "itemtype": "property",
            "name": "currentLocation",
            "type": "CBHelperCurrentLocation",
            "default": "{}",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 194,
            "description": "Sets the password for the application on cloudbase.io. This method expects the md5 hash\nof the application password. Once the password is set the CBHelper class will automatically\ntry to register the device with the cloudbase.io servers thus starting a new session and \nreceiving the sessionId",
            "itemtype": "method",
            "name": "setPassword",
            "params": [
                {
                    "name": "pwd",
                    "description": "The md5 hash of the application password on cloudbase.io",
                    "type": "String"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 212,
            "description": "Registers a device with the cloudbase.io server and receives the sessionId.",
            "itemtype": "method",
            "name": "registerDevice",
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 252,
            "description": "Logs something to the cloudbase.io servers. This log is accessible through the application\ncontrol panel on the cloudbase.io account pages and allows to keep track of potential issues\nand errors encountered by the application's users.\nAdditionally it is possible to send special \"EVENT\" messages by using the EVENT severity type.\nThese events will be collected and used to generate analytics for custom events.\n\nShortcuts for each severity types are also available:\nlogDebug(line, category);\nlogInfo(line, category);\nlogWarn(line, category);\nlogError(line, category);\nlogFatal(line, category);\nlogEvent(line, category);",
            "itemtype": "method",
            "name": "writeLog",
            "params": [
                {
                    "name": "line",
                    "description": "The text to log",
                    "type": "String"
                },
                {
                    "name": "category",
                    "description": "The category to log to. If this parameter is null then \"DEFAULT\" is used",
                    "type": "String"
                },
                {
                    "name": "severity",
                    "description": "The severity of the logged information - DEBUG/INFO/WARNING/ERROR/FATAL/EVENT",
                    "type": "CBHelper.CBLogLevel"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 283,
            "description": "Sends navigation information to the cloudbase.io servers using the sessionId. This data\nis used to generate the usage flow analytics to help you understand how your users interact\nwith your application.\nThis method should be called every time a new screen is displayed with the new screen name.",
            "itemtype": "method",
            "name": "logNavigation",
            "params": [
                {
                    "name": "viewName",
                    "description": "The unique identifier of the newly loaded screen",
                    "type": "String"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 319,
            "description": "Inserts a document in a collection in your cloudbase. The document could be any object.\nThe cloudbase.io helper class will automatically try to serialise it to JSON.\nIt is also possible to attach files to a document through this method. File attachments \nwill appear as a special new field in your document called cb_files which will contain\na list of the files attached to the document and their unique identifier on the cloudbase.io\nservers. The files can then be downloaded using this unique identifier",
            "itemtype": "method",
            "name": "insertDocument",
            "params": [
                {
                    "name": "collection",
                    "description": "The name of the collection (table) to save the new document to",
                    "type": "String"
                },
                {
                    "name": "data",
                    "description": "The object to be saved - this will automatically be serialised to JSON",
                    "type": "Object"
                },
                {
                    "name": "files",
                    "description": "The list of files to be attached to the document - this should be an array of full paths\n\tArray('/tmp/test.csv', '/sd/media/image01.jpg');",
                    "type": "Array"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 362,
            "description": "Returns all of the documents in a collection.",
            "itemtype": "method",
            "name": "searchAllDocuments",
            "params": [
                {
                    "name": "collection",
                    "description": "The name of the collection to search",
                    "type": "String"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 373,
            "description": "Returns the documents matching the given set of conditions. For a complete description of the \npossible conditions see the REST APIs documentation on http://cloudbase.io/documentation/rest-apis",
            "itemtype": "method",
            "name": "searchDocuments",
            "params": [
                {
                    "name": "conditions",
                    "description": "The object representing the search conditions: { 'first_name' : 'cloud' }",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The name of the collection to search",
                    "type": "String"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 391,
            "description": "Overwrites the documents matching the given conditions with the new objects passed to the method. \nWorks in exactly the same way as an SQL update.",
            "itemtype": "method",
            "name": "updateDocument",
            "params": [
                {
                    "name": "data",
                    "description": "The data of the new objects",
                    "type": "Object"
                },
                {
                    "name": "conditions",
                    "description": "The object representing the search conditions: { 'first_name' : 'cloud' }",
                    "type": "Object"
                },
                {
                    "name": "collection",
                    "description": "The name of the collection to search",
                    "type": "String"
                },
                {
                    "name": "files",
                    "description": "The list of files to be attached to the document - this should be an array of full paths\n\tArray('/tmp/test.csv', '/sd/media/image01.jpg');",
                    "type": "Array"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 441,
            "description": "Once the device is ready to receive push notifications subscribe the device to a channel (or\ncreate a new one) on the cloudbase.io servers. From the moment the the device is subscribed \nall new notifications sent to the particular channel will be pushed to it.\nBy default all devices are part of the \"all\" channel.",
            "itemtype": "method",
            "name": "subscribeDevice",
            "params": [
                {
                    "name": "token",
                    "description": "The token received from the Apple/Google/Microsoft servers when the device is\n\tregistered for notifications",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "The name of the channel the device should be subscribed to",
                    "type": "String"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 465,
            "description": "Removes the device from the given notification channel.",
            "itemtype": "method",
            "name": "unsubscribeDevice",
            "params": [
                {
                    "name": "token",
                    "description": "The token received from the Apple/Google/Microsoft servers when the device is\n\tregistered for notifications",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "The name of the channel the device should be subscribed to",
                    "type": "String"
                },
                {
                    "name": "removeCompletely",
                    "description": "If this parameter is set to true then the device is also removed from the \"all\" channel",
                    "type": "Bool"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 486,
            "description": "If the application security settings on cloudbase.io allow it then the client can send push notifications\nto other devices.",
            "itemtype": "method",
            "name": "sendNotification",
            "params": [
                {
                    "name": "text",
                    "description": "The text of the notification.",
                    "type": "String"
                },
                {
                    "name": "channel",
                    "description": "The name of the channel the device should be subscribed to",
                    "type": "String"
                },
                {
                    "name": "badge",
                    "description": "The Badge to be used for the notification (iOS)",
                    "type": "Int"
                },
                {
                    "name": "sound",
                    "description": "The sound for the notification (iOS)",
                    "type": "String"
                },
                {
                    "name": "certificateType",
                    "description": "The certificate type to be used for the notification - either \"development\" or \"production\" (iOS)",
                    "type": "String"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 511,
            "description": "Sends an email to the given recipient using a template previously created on cloudbase.io.\nEmail templates can be managed from the application control panel on cloudbase.io",
            "itemtype": "method",
            "name": "sendNotification",
            "params": [
                {
                    "name": "recipient",
                    "description": "The email address of the recipient",
                    "type": "String"
                },
                {
                    "name": "subject",
                    "description": "The subject of the email",
                    "type": "String"
                },
                {
                    "name": "templateCode",
                    "description": "The unique identifier of the template",
                    "type": "String"
                },
                {
                    "name": "vars",
                    "description": "An associative array of varibles to fill the template { 'first_name' : 'Cloud' }\n\tFor more information on how to use these variables in a template see the cloudbase.io documentation",
                    "type": "Object"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 536,
            "description": "Executes a CloudFunction on the cloudbase.io servers. Additional POST parameters\ncan be specified in this method.",
            "itemtype": "method",
            "name": "executeCloudFunction",
            "params": [
                {
                    "name": "functionCode",
                    "description": "The unique code assigned by cloudbase.io to the CloudFunction",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A list of additional parameters for the CloudFunction (if needed)",
                    "type": "Object"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "CBHelper.js",
            "line": 551,
            "description": "Executes one of the standard Applets provided by cloudbase.io - the list of applets\nand their documentation can be found at http://cloudbase.io/documentation/applets",
            "itemtype": "method",
            "name": "executeApplet",
            "params": [
                {
                    "name": "appletCode",
                    "description": "The unique code of the applet",
                    "type": "String"
                },
                {
                    "name": "params",
                    "description": "A list of additional parameters for the applet (if needed)",
                    "type": "Object"
                },
                {
                    "name": "responder",
                    "description": "A function to handle the reponse returned by cloudbase.io\n\tin the form of a CBHelperResponseInfo object",
                    "type": "Function(CBHelperResponseInfo)"
                }
            ],
            "class": "CBHelper"
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 1,
            "description": "XMLHttpRequest.js Copyright (C) 2011 Sergey Ilinsky (http://www.ilinsky.com)\n\nThis work is free software; you can redistribute it and/or modify\nit under the terms of the GNU Lesser General Public License as published by\nthe Free Software Foundation; either version 2.1 of the License, or\n(at your option) any later version.\n\nThis work is distributed in the hope that it will be useful,\nbut without any warranty; without even the implied warranty of\nmerchantability or fitness for a particular purpose. See the\nGNU Lesser General Public License for more details.\n\nYou should have received a copy of the GNU Lesser General Public License\nalong with this library; if not, write to the Free Software Foundation, Inc.,\n59 Temple Place, Suite 330, Boston, MA 02111-1307 USA",
            "class": ""
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 157,
            "description": "if (bAsync) {\n\tfQueue_remove(oRequest);\n}",
            "class": ""
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 166,
            "description": "// BUGFIX: IE - cache issue\nif (!oRequest._object.getResponseHeader(\"Date\")) {\n\t// Save object to cache\n\toRequest._cached  = oRequest._object;\n\n\t// Instantiate a new transport object\n\tcXMLHttpRequest.call(oRequest);\n\n\t// Re-send request\n\tif (sUser) {\n\t\tif (sPassword) {\n\t\t\toRequest._object.open(sMethod, sUrl, bAsync, sUser, sPassword);\n\t\t} else {\n\t\t\toRequest._object.open(sMethod, sUrl, bAsync);\n\t\t}\n\n\t\toRequest._object.setRequestHeader(\"If-Modified-Since\", oRequest._cached.getResponseHeader(\"Last-Modified\") || new window.Date(0));\n\t\t// Copy headers set\n\t\tif (oRequest._headers) {\n\t\t\tfor (var sHeader in oRequest._headers) {\n\t\t\t\t// Some frameworks prototype objects with functions\n\t\t\t\tif (typeof oRequest._headers[sHeader] == \"string\") {\n\t\t\t\t\toRequest._object.setRequestHeader(sHeader, oRequest._headers[sHeader]);\n\t\t\t\t}\n\t\t\t}\n\t\t}\n\t\toRequest._object.onreadystatechange = function() {\n\t\t\t// Synchronize state\n\t\t\toRequest.readyState   = oRequest._object.readyState;\n\n\t\t\tif (oRequest._aborted) {\n\t\t\t\t//\n\t\t\t\toRequest.readyState = cXMLHttpRequest.UNSENT;\n\n\t\t\t\t// Return\n\t\t\t\treturn;\n\t\t\t}\n\n\t\t\tif (oRequest.readyState == cXMLHttpRequest.DONE) {\n\t\t\t\t// Clean Object\n\t\t\t\tfCleanTransport(oRequest);\n\n\t\t\t\t// get cached request\n\t\t\t\tif (oRequest.status == 304) {\n\t\t\t\t\toRequest._object  = oRequest._cached;\n\t\t\t\t}\n\n\t\t\t\t//\n\t\t\t\tdelete oRequest._cached;\n\n\t\t\t\t//\n\t\t\t\tfSynchronizeValues(oRequest);\n\n\t\t\t\t//\n\t\t\t\tfReadyStateChange(oRequest);\n\n\t\t\t\t// BUGFIX: IE - memory leak in interrupted\n\t\t\t\tif (bIE && bAsync) {\n\t\t\t\t\twindow.detachEvent(\"onunload\", fOnUnload);\n\t\t\t\t}\n\n\t\t\t}\n\t\t};\n\t\toRequest._object.send(null);\n\n\t\t// Return now - wait until re-sent request is finished\n\t\treturn;\n\t};",
            "class": ""
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 274,
            "description": "// Add to queue\nif (this._async) {\n\tfQueue_add(this);",
            "class": ""
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 280,
            "description": "}",
            "class": ""
        },
        {
            "file": "XMLHttpRequest.js",
            "line": 393,
            "description": "// Queue manager\nvar oQueuePending = {\"CRITICAL\":[],\"HIGH\":[],\"NORMAL\":[],\"LOW\":[],\"LOWEST\":[]},\naQueueRunning = [];\nfunction fQueue_add(oRequest) {\n\toQueuePending[oRequest.priority in oQueuePending ? oRequest.priority : \"NORMAL\"].push(oRequest);\n\t//\n\tsetTimeout(fQueue_process);\n};\n\nfunction fQueue_remove(oRequest) {\n\tfor (var nIndex = 0, bFound = false; nIndex < aQueueRunning.length; nIndex++)\n\tif (bFound) {\n\t\taQueueRunning[nIndex - 1] = aQueueRunning[nIndex];\n\t} else {\n\t\tif (aQueueRunning[nIndex] == oRequest) {\n\t\t\tbFound  = true;\n\t\t}\n}\n\n\tif (bFound) {\n\t\taQueueRunning.length--;\n\t}\n\n\n\t//\n\tsetTimeout(fQueue_process);\n};\n\nfunction fQueue_process() {\nif (aQueueRunning.length < 6) {\nfor (var sPriority in oQueuePending) {\nif (oQueuePending[sPriority].length) {\nvar oRequest  = oQueuePending[sPriority][0];\noQueuePending[sPriority]  = oQueuePending[sPriority].slice(1);\n//\naQueueRunning.push(oRequest);\n// Send request\nfXMLHttpRequest_send(oRequest);\nbreak;\n}\n}\n}\n};",
            "class": ""
        }
    ]
}